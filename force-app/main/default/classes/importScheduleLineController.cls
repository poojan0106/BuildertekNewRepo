public without sharing class importScheduleLineController {
    @AuraEnabled
    public static string insertData(String recordId, String strFileData){
        String returnresponse = '';
        Map<String, buildertek__Project_Task__c> projectInsertTaskMap = new Map<String, buildertek__Project_Task__c>();
        List<fieldWrapper> datalist = (List<fieldWrapper>)JSON.deserialize(strFileData, List<fieldWrapper>.class);
        Map<String, String> myMap = new Map<String, String>();
        Map<String, Decimal> durationMap = new Map<String, Decimal>();

        buildertek__Schedule__c mainScheduleRec;
        if(String.isNotBlank(recordId)){
            mainScheduleRec = [SELECT Id, Name, buildertek__Initial_Start_Date__c, buildertek__Start_Date__c, buildertek__End_Date__c, buildertek__Original_Start_Date__c, buildertek__Original_End_Date__c FROM buildertek__Schedule__c WHERE Id =:recordId limit 1];
        }
        
        list<buildertek__Project_Task__c> existedScheduleitems = new list<buildertek__Project_Task__c>();
        existedScheduleitems = [select Id, buildertek__Completion__c, buildertek__Full_Name__c,buildertek__Contractor__c, buildertek__Contractor_Resource__c, buildertek__Duration__c, buildertek__Finish__c, buildertek__Resource__c, buildertek__Lag__c, buildertek__Milestone__c, buildertek__Notes__c, buildertek__Order__c, buildertek__Original_End_Date__c, buildertek__Original_Start_Date__c, buildertek__Phase__c, buildertek__Type__c, buildertek__Dependency__c, buildertek__Project__c, buildertek__Purchase_Order__c, buildertek__Reason_for_Date_Change__c, buildertek__Reason_for_Date_Change_PL__c, buildertek__Required_Completion_Date__c, buildertek__Schedule__c, buildertek__Start__c, Name
                                from buildertek__Project_Task__c
                                where buildertek__Schedule__c  =:recordId AND buildertek__Milestone__c =: false order by buildertek__Order__c,CreatedDate NULLS LAST];

        Integer lastIndex = -1;
        Set<Id> existingSchItemId = new Set<Id>();
        if(existedScheduleitems.Size() > 0){
            lastIndex = existedScheduleitems.Size() - 1;
        }
        Integer count = 1;
        if(lastIndex >=0){
            if(Integer.valueOf(existedScheduleitems[lastIndex].buildertek__Order__c) == null){
                existedScheduleitems[lastIndex].buildertek__Order__c = 0;
            }
            count = Integer.valueOf(existedScheduleitems[lastIndex].buildertek__Order__c)+1;
        }

        for (fieldWrapper wrapper : datalist){
            if (wrapper.Name != null && String.isNotBlank(wrapper.Name)){
                buildertek__Project_Task__c schItem = new buildertek__Project_Task__c();
                String sizeString = wrapper.Name;
                Integer maxSize = 79;
                String des = wrapper.Name;
                if(sizeString.length() > maxSize ){
                    sizeString = sizeString.substring(0, maxSize);
                }
                schItem.Name = sizeString;
                schItem.buildertek__Long_Description__c = wrapper.Name;
                schItem.buildertek__Full_Name__c = wrapper.Name;
                schItem.buildertek__Schedule__c = recordId;
                schItem.buildertek__Completion__c = wrapper.percentComplete;

                Date startDate = system.today();
                if (wrapper.StartDate != null) {
                    startDate = wrapper.StartDate;
                } else if(mainScheduleRec.buildertek__Initial_Start_Date__c != null){
                    startDate = mainScheduleRec.buildertek__Initial_Start_Date__c;
                }

                DateTime currentDate = DateTime.newInstance(startDate.year(), startDate.month(), startDate.day());
                String todayDay = currentDate.format('EEEE');
                if (todayDay == 'Saturday') {
                    startDate = startDate.addDays(2);
                } else if (todayDay == 'Sunday') {
                    startDate = startDate.addDays(1);
                }

                schItem.buildertek__Start__c = startDate;
                wrapper.StartDate = Date.valueOf(startDate);

                schItem.buildertek__Duration__c = wrapper.Duration;
                schItem.buildertek__Finish__c = addDaysSkippingWeekends(schItem.buildertek__Start__c, Integer.valueOf(wrapper.Duration));
                schItem.buildertek__Original_Start_Date__c = Date.valueOf(wrapper.StartDate);
                schItem.buildertek__Original_End_Date__c = startDate.addDays(wrapper.Duration);
                schItem.buildertek__Phase__c = wrapper.Phase;
                schItem.buildertek__Notes__c = wrapper.Notes;
                schItem.buildertek__Lag__c = Double.valueOf(wrapper.Lag != null && String.isNotBlank(wrapper.Lag) ? wrapper.Lag : '0');
                schItem.buildertek__Order__c = count;
                count++;
                
                projectInsertTaskMap.put(schItem.Name, schItem);
            }
        }
        if (projectInsertTaskMap.size() > 0){
            try{
                insert projectInsertTaskMap.values();
                
                Set<Id> taskIds = new Set<Id>();
                for (String key : projectInsertTaskMap.keySet()) {
                    System.debug('projectInsertTaskMap :=>  ' + projectInsertTaskMap.get(key));
                    taskIds.add(projectInsertTaskMap.get(key).Id);
                }

                for (fieldWrapper wrapper : datalist){
                    System.debug('wrapper.Dependency ==> '+wrapper.Dependency);
                    if(String.isNotBlank(wrapper.Dependency)){
                        if(projectInsertTaskMap.containsKey(wrapper.Dependency)){
                            system.debug('inside If => ' + projectInsertTaskMap.get(wrapper.Dependency).Id);
                            projectInsertTaskMap.get(wrapper.Name).buildertek__Dependency__c = projectInsertTaskMap.get(wrapper.Dependency).Id;

                        }
                        else{
                            system.debug(wrapper.Dependency + ' This Dependany not present');
                        }
                    //     System.debug('projectInsertTaskMap.get(wrapper.Dependency).Id ==> '+projectInsertTaskMap.get(wrapper.Dependency).Id);
                    //         System.debug('Dependency If '+ projectInsertTaskMap.get(wrapper.Dependency));
                    }
                }

                update projectInsertTaskMap.values();


                Map<String, buildertek__Project_Task__c> newProjectTaskMap = new Map<String, buildertek__Project_Task__c>([SELECT Id, Name, buildertek__Start__c, buildertek__Finish__c, buildertek__Schedule__c, buildertek__Duration__c, buildertek__Milestone__c, buildertek__Dependency__c, buildertek__Order__c FROM Project_Task__c WHERE Id IN: taskIds ORDER BY buildertek__Order__c ASC]);

                for (String key : newProjectTaskMap.keySet()) {
                    System.debug('Old newProjectTaskMap.get(key) ==> '+newProjectTaskMap.get(key));
                    if (newProjectTaskMap.get(key).buildertek__Dependency__c != null) {
                        newProjectTaskMap.get(key).buildertek__Start__c = newProjectTaskMap.get(newProjectTaskMap.get(key).buildertek__Dependency__c).buildertek__Finish__c;
                        newProjectTaskMap.get(key).buildertek__Finish__c = addDaysSkippingWeekends(newProjectTaskMap.get(key).buildertek__Start__c, Integer.valueOf(newProjectTaskMap.get(key).buildertek__Duration__c));
                    }
                }

                for (String key : newProjectTaskMap.keySet()) {
                    System.debug('New newProjectTaskMap.get(key) ==> '+newProjectTaskMap.get(key));
                }
                update newProjectTaskMap.values();

                    // Milestone

                    Map<String, buildertek__Project_Task__c> milestoneMap = new Map<String, buildertek__Project_Task__c>();
                    Map<String, buildertek__Project_Task__c> projectNewTaskMap = new Map<String, buildertek__Project_Task__c>();
                    List<buildertek__Project_Task__c> projectMilestoneInsert = new List<buildertek__Project_Task__c>();
            
                    List<Project_Task__c> task = [Select Id, Name, buildertek__Phase__c, buildertek__Start__c, buildertek__Finish__c,buildertek__Schedule__c, buildertek__Duration__c, buildertek__Milestone__c
                                                FROM Project_Task__c
                                                WHERE buildertek__Schedule__c = :recordId];
            
                    Map<String, Date> milestoneFinishDateMap = new Map<String, Date>();
                    System.debug('recordId: ' + recordId);
                    List<AggregateResult> milestonePhaseFinishDateList = [SELECT buildertek__Phase__c, MAX(buildertek__Finish__c) FROM buildertek__Project_Task__c 
                    WHERE buildertek__Schedule__c = :recordId GROUP BY buildertek__Phase__c];
            
                    for (AggregateResult result : milestonePhaseFinishDateList) {
                        String phase = (String)result.get('buildertek__Phase__c');
                        Date finishDate = (Date)result.get('expr0');
                        milestoneFinishDateMap.put(phase, finishDate);
                    }
            
                    for (Project_Task__c tasks : task){
                        System.debug('tasks: ' + tasks);
                        if (!tasks.buildertek__Milestone__c){
                            projectNewTaskMap.put(tasks.buildertek__Phase__c, tasks);
                            System.debug('Milestone IF Condition: ');
                        } else{
                            milestoneMap.put(tasks.buildertek__Phase__c, tasks);
                            System.debug('Milestone ELSE Condition: ');
                        }
                    }
            
                    for (Project_Task__c tasks : projectNewTaskMap.values()){
                        System.debug('projectNewTaskMap Task: '+tasks);
                        if (!milestoneMap.containsKey(tasks.buildertek__Phase__c) && !tasks.buildertek__Milestone__c){
                            System.debug('Check Project Manager 5');
                            System.debug('Check tasks.buildertek__Milestone__c'+tasks.buildertek__Milestone__c);
                            System.debug('Check tasks.buildertek__Phase__c'+tasks.buildertek__Phase__c);
                            if (tasks.buildertek__Phase__c != null){
                                buildertek__Project_Task__c project = new buildertek__Project_Task__c();
                                project.Name = 'Milestone Complete';
                                project.buildertek__Phase__c = tasks.buildertek__Phase__c;
                                project.buildertek__Start__c = milestoneFinishDateMap.get(tasks.buildertek__Phase__c);
                                project.buildertek__Schedule__c = recordId;
                                project.buildertek__Use_Project_Manager_from_Schedule__c = true;
                                project.buildertek__Milestone__c = true;
                                project.buildertek__Duration__c = 0;
                                projectMilestoneInsert.add(project);
                            }
                        }
                    }
            
                    System.debug('Project Task::' + projectMilestoneInsert);
                    ProjectTaskTriggerHandler.blnSkipTaskTrigger = true;
                    insert projectMilestoneInsert;
                    ProjectTaskTriggerHandler.blnSkipTaskTrigger = false;
                
                returnresponse = 'SUCCESS';
            } catch (Exception e){
                returnresponse = 'ERROR'+' '+e.getMessage()+' '+e.getLineNumber();
            }
        }
        return returnresponse;
    }

    // public static Date addDaysSkippingWeekends(Date startDate, Integer duration){

    //     System.debug('addDaysSkippingWeekends');
    //     System.debug('original startDate ==> '+startDate);
    //     System.debug('original duration ==> '+duration);
    //     Date startDates = Date.newInstance(startDate.year(), startDate.month(), startDate.day());
    //     Integer addedDays = 0;

    //     while (addedDays < duration) {
    //         startDates = startDates.addDays(1);
    //         System.debug('startDates ==> '+startDates);
    //         DateTime currentDate = DateTime.newInstance(startDates.year(), startDates.month(), startDates.day());
    //         System.debug('currentDate ==> '+currentDate);
    //         String todayDay = currentDate.format('EEEE');
    //         System.debug('todayDay ==> '+todayDay);
    //         if (todayDay != 'Saturday' && todayDay != 'Sunday') {
    //             System.debug('addedDays ==> '+addedDays);
    //             ++addedDays;
    //         }
    //     }

    //     Date endDate = startDates.addDays(-1); 
    //     return endDate;
	// }

    // Skip weekend and calculate date
	public static Date addDaysSkippingWeekends(Date sDate, Integer days){
		Date result = sDate;
		Integer addedDays = 0;
		while (addedDays < days){
			result = result.addDays(1);
			DateTime currentDate = DateTime.newInstance(result.year(), result.month(), result.day());
			String todayDay = currentDate.format('EEEE');
			if (todayDay != 'Saturday' && todayDay != 'Sunday'){
				++addedDays;
			}
		}
		return result;
	}

    public class fieldWrapper{
        public String Name;
        public String Dependency;
        public Date StartDate;
        public Integer Duration;
        public Decimal percentComplete;
        public String Phase;
        public String Notes;
        public String Lag;
    }

}